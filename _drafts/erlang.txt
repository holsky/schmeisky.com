
Armstrong thesis
P2 fail fast processes 
Our programming model makes extensive use of fail-fast processes. Such techniques are com- mon in hardware platforms for building fault-tolerant systems but are not commonly used in sodware solutions. This is mainly because conven- tional languages do not permit dicerent sodware modules to co-exist in such a way that there is no interference between modules. 

P19
Oriented Programming also provides the two major ad- vantages commonly associated with object-oriented programming. These are polymorphism and the use of defined protocols having the same mes- sage passing interface between inst 


P21 3 steps for modelin
above rules may appear at first sight to be diecult—ader all most concurrency extensions to sequential programming languages provide facilities for almost exactly the opposite providing things like locks, and semaphores, and provision for shared data, and reliable message passing. Fortunately, the oppo 


P28 let it crash leads to simpler error model thus higher reliability
-- like Hardware if it does it work Signal it and stoo
P68 factorial example

Up to p100 - why erlang servers take a function as an input (state etc?). How to implement your own server that encapsulates all the difficult parts

Hot code swapping (without state) is a one pager!!

P104 error handling philosophy 
Let someone else - only way to recover from complete failures like system crashes or hardware failures. Unified error handling model

P107 exception - run time system does not know what to do (if specified, can be caught by programmer)
Error - unspecified (programmer does not know what to do)
against defense in depth!

P109 good Design reveals intention

P126
A wbf only throws a ab exception of the programmer does not know what to do

P151
Example for let it crash - might be a bug but also not specified behavior 

Beam - vm has erlang specific byte codes like spawn


P170 a clean dirty manner to structure clean is side effect free

P176 
Cascading restarts do not work - flat trees
Service degradation 

179 example for non-defensive programming. Unknown hw codes are not in code, erlang adds enough info for debugging 

Case studies: bmr and ssl both had custom release update procedures, mechanism seems adaptable 

P199 no measurement of uptime and stability because erlang was not instrumented to do this - 9x9 is from a PowerPoint of an axd301 customer but unclear how that was derived 
P116 a 

    ⁃   try something simpler


227 error handling again useful

Don't use 238 _ if later you need the variable it is easier to remove a _ 
-- 
Holger Schmeisky | Agility Coaching | +49 176 12758273  | holger.schmeisky@zalando.de


erlang

dynamic typingm bowling problem, problem with defining type of frame.
realizing: Hey I can just put whatever I want in there and pattern match
on it!

